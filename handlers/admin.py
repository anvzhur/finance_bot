# handlers/admin.py
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import TELEGRAM_ADMIN_IDS
from database import register_user, get_all_operations
import csv
import io

router = Router()

class AdminMenu(StatesGroup):
    main = State()

class RegisterForm(StatesGroup):
    waiting_for_telegram_id = State()
    waiting_for_api_key = State()
    waiting_for_organisation_name = State()

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

ADMIN_MENU = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="üìä –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (CSV)")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@router.message(F.text == "üë§ –ê–¥–º–∏–Ω–∫–∞")
@router.message(Command("admin"))
async def show_admin_menu(message: types.Message, state: FSMContext):
    if message.from_user.id not in TELEGRAM_ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await state.set_state(AdminMenu.main)
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ADMIN_MENU)

@router.message(AdminMenu.main, F.text == "‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def start_register_flow(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(RegisterForm.waiting_for_telegram_id)

@router.message(AdminMenu.main, F.text == "üìä –í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (CSV)")
async def trigger_stats(message: types.Message, state: FSMContext):
    if message.from_user.id not in TELEGRAM_ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    try:
        operations = await get_all_operations()
        if not operations:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.")
            return
        output = io.StringIO()
        writer = csv.writer(output)
        writer.writerow(["telegram_id", "operation_type", "operation_date"])
        writer.writerows(operations)
        csv_data = output.getvalue()
        output.close()
        csv_bytes = io.BytesIO(csv_data.encode("utf-8"))
        csv_bytes.name = "operations.csv"
        await message.answer_document(
            types.BufferedInputFile(csv_bytes.getvalue(), filename="operations.csv"),
            caption="üìä –§–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç: —Ç–∏–ø, –¥–∞—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

@router.message(AdminMenu.main, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message, state: FSMContext):
    from handlers.start import get_main_menu
    is_admin = message.from_user.id in TELEGRAM_ADMIN_IDS
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu(is_admin))

@router.message(RegisterForm.waiting_for_telegram_id)
async def process_telegram_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        await state.update_data(telegram_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á Report.Finance:")
        await state.set_state(RegisterForm.waiting_for_api_key)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

@router.message(RegisterForm.waiting_for_api_key)
async def process_api_key(message: types.Message, state: FSMContext):
    api_key = message.text.strip()
    if not api_key:
        await message.answer("API-–∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(api_key=api_key)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(RegisterForm.waiting_for_organisation_name)

@router.message(RegisterForm.waiting_for_organisation_name)
async def process_organisation_name(message: types.Message, state: FSMContext):
    org_name = message.text.strip()
    if org_name == "-":
        org_name = None
    data = await state.get_data()
    success = await register_user(data["telegram_id"], data["api_key"], org_name)
    if success:
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data['telegram_id']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {org_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}."
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    await state.set_state(AdminMenu.main)
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ADMIN_MENU)